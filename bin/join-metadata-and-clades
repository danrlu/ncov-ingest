#!/usr/bin/env python3
import argparse
import sys
from datetime import datetime
import pandas as pd
import numpy as np

INSERT_BEFORE_THIS_COLUMN = "pango_lineage"
METADATA_JOIN_COLUMN_NAME = 'strain'
NEXTCLADE_JOIN_COLUMN_NAME = 'seqName'
VALUE_MISSING_DATA = '?'

rate_per_day = 0.0006 * 29903 / 365
reference_day = datetime(2020,1,1).toordinal()

column_map = {
    "clade": "Nextstrain_clade",
    "totalMissing": "missing_data",
    "totalSubstitutions": "divergence",
    "totalNonACGTNs": "nonACGTN",
    "qc.privateMutations.total":  "rare_mutations",
    "qc.snpClusters.totalSNPs": "snp_clusters",
    "qc.missingData.status": "QC_missing_data",
    "qc.mixedSites.status": "QC_mixed_sites",
    "qc.privateMutations.status": "QC_rare_mutations",
    "qc.snpClusters.status": "QC_snp_clusters",
}

preferred_types = {
    "divergence": "int32",
    "nonACGTN": "int32",
    "missing_data": "int32",
    "snp_clusters": "int32",
    "rare_mutations": "int32"
}

def reorder_columns(result: pd.DataFrame):
    """
    Moves the new clade column after a specified column
    """
    columns = list(result.columns)
    columns.remove(column_map['clade'])
    insert_at = columns.index(INSERT_BEFORE_THIS_COLUMN)
    columns.insert(insert_at, column_map['clade'])
    return result[columns]


def parse_args():
    parser = argparse.ArgumentParser(
        description="Joins metadata file with Nextclade clade output",
    )
    parser.add_argument("first_file")
    parser.add_argument("second_file")
    parser.add_argument("-o", default=sys.stdout)
    return parser.parse_args()

def datestr_to_ordinal(x):
    try:
        return datetime.strptime(x,"%Y-%m-%d").toordinal()
    except:
        return np.nan

def isfloat(value):
  try:
    float(value)
    return True
  except ValueError:
    return False

def main():
    args = parse_args()

    metadata = pd.read_csv(args.first_file, index_col=METADATA_JOIN_COLUMN_NAME,
                           sep='\t', low_memory=False, na_filter = False)

    # Read and rename clade column to be more descriptive
    clades = pd.read_csv(args.second_file, index_col=NEXTCLADE_JOIN_COLUMN_NAME,
                         sep='\t', low_memory=False, na_filter = False) \
            .rename(columns=column_map)
    # clades.astype(preferred_types)

    clades = clades[list(column_map.values())]
    divergence = pd.read_csv("source-data/clade_divergence.tsv", sep='\t', index_col="clade")
    def clade_to_offset(x):
        try:
            return divergence.loc[x]['intercept']
        except:
            # expected number of mutations in jan 2020
            return 2.0

    # Concatenate on columns
    result = pd.merge(
        metadata, clades,
        left_index=True,
        right_index=True,
        how='left'
    )

    # extract divergence, time and offset information into vectors or series
    t = result["date"].apply(datestr_to_ordinal)
    offset = result["Nextstrain_clade"].apply(clade_to_offset)
    div = result["divergence"]
    div_array = np.array([float(x) if isfloat(x) else np.nan for x in div])
    # calculate divergence
    result["clock_deviation"] = div_array - ((t-reference_day)*rate_per_day + offset)

    for col in list(column_map.values()) + ["clock_deviation"]:
        result[col] = result[col].fillna(VALUE_MISSING_DATA)

    # Move the new column so that it's next to other clade columns
    result = reorder_columns(result)

    result.to_csv(args.o, index_label=METADATA_JOIN_COLUMN_NAME, sep='\t')


if __name__ == '__main__':
    main()
