#!/usr/bin/env python3
"""
Notifies specified users of new data for their interested locations
"""
import sys
import json
import argparse
import subprocess
import pandas as pd
from pathlib import Path
from typing import Dict, Iterable, List, Union


LOCATION_HIERARCHY_COLUMNS = ['region', 'country', 'division', 'location']
base = Path(__file__).resolve().parent.parent


def create_new_areas_lists(metadata: pd.DataFrame) -> Dict[str, List[str]]:
    """
    Returns a dictionary with keys of every location hierarchy resolution and
    values containing a list of unique area names at each resolution in the
    given *metadata*.
    """
    def unique_resolution_areas(series: Iterable[pd.Series]) -> List[str]:
        """ Returns a list of unique, non-null items in the given *series*. """
        return list(
            pd.concat(series) \
                .dropna() \
                .unique()
        )

    # Locations do not have an associated exposure column
    resolutions_with_exposure = LOCATION_HIERARCHY_COLUMNS.copy()
    resolutions_with_exposure.remove('location')

    areas: Dict[str, List] = {}

    for r in resolutions_with_exposure:
        areas[r] = unique_resolution_areas(
            [incoming_metadata[r], incoming_metadata[f'{r}_exposure']]
        )

    # Handle location edge case
    areas['location'] = unique_resolution_areas([incoming_metadata['location']])

    return areas


def alert_user_of_new_strains(entry: Dict[str, Union[str, List[str]]],
                              new_areas: Dict[str, List[str]],
                              slack_channel : str ,
                              slack_token : str ):
    """
    Using the given configuration *entry*, sends a Slack alert to the configured
    user if there are new strains in the user's interested location hierarchy
    areas.
    """
    member_id = entry.get('slack_member_id')

    if not member_id:
        # We can't send a Slack notification to a specified user without this
        # field
        return

    alerts: List[str] = []

    for resolution in LOCATION_HIERARCHY_COLUMNS:
        if not entry.get(resolution):
            # No alert has been configured at this resolution
            continue

        alerts += [ area for area in entry[resolution] if area in new_areas[resolution] ]

    if not alerts:
        return

    alert_text = f"There are new strains from {', '.join(alerts)}"

    subprocess.run([
        f"{base}/bin/notify-slack", f"<@{member_id}>: {alert_text}" , slack_token , slack_channel
    ])

if __name__ == "__main__" :
    parser = argparse.ArgumentParser(
        description="Sends Slack alerts to certain, configurable users when "
            "there are new strains available from their interested areas.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("incoming_metadata",
        default=sys.stdin,
        help="A TSV of incoming metadata.")
    parser.add_argument("--config",
        default=base / "new-sequence-alerts-config.json",
        help="A config file declaring which users want to be notified of new strains in which areas.")
    
    parser.add_argument("--slack-channel",
        required=True,
        help="slack channel to post to.")

    parser.add_argument("--slack-token",
        required=True,
        help="slack token.")

    args = parser.parse_args()
    
    with open(args.config, 'r') as f:
        config = json.load(f)
    
    incoming_metadata = pd.read_csv(args.incoming_metadata, sep='\t')
    new_areas = create_new_areas_lists(incoming_metadata)
    
    for entry in config:
        alert_user_of_new_strains(entry, new_areas , args.slack_channel , args.slack_token )
